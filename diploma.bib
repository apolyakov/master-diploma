% Encoding: UTF-8

@article{cpu-arches,
title={Trends in Processor Architecture of Mobile Phones: A Survey},
volume={29}, url={http://sersc.org/journals/index.php/IJAST/article/view/15631},
abstractNote={&lt;p&gt;&lt;em&gt;Mobile’s has become a part and parcel of our lives. The brain of a mobile is its processor. The semiconductor device, CPU chip is placed inside chip package which reduces the heating effect. It is designed to operate at lower voltage compared to desktop and with an increased “sleep mode” capability. We can control the power levels of the mobile processor and can even turn of sections of chips when they are not in use. The so-called clock frequency is bought down in mobiles to increase the battery life. The year 2016 to 2020 focused more on improving the existing features than introducing new features. Mobiles had transformed from a device that was just used to communicate to a source of knowledge. This transformation is possible only with the help of improvement of processors. The aim of this paper is to study about the changes brought in the past 5 years in processors&lt;/em&gt;.&lt;/p&#38;gt;},
number={05},
journal={International Journal of Advanced Science and Technology}, author={Advaitha B,Mopuru Lahari,Gopalakrishnan T},
year={2020},
month={May},
pages={6265 - 6274} 
}


@online{mobile-phones-cpu-trends,
  title        = "{Kolawole Emmanuel Olawale, Lofinmakin Damilola Ayomiposi, Nwidobie Gabriel. Trends in Mobile Phones Processor Architecture, Academia}",
  url          = {https://www.academia.edu/38755927/Trends_in_Mobile_Phones_Processor_Architecture},
  urldate      = "02.12.2020",
  language     = "english"
}

@INPROCEEDINGS{mob-apps-approaches,

author={D. {Kramer} and T. {Clark} and S. {Oussena}},
booktitle={2010 IEEE International Conference on Networked Embedded Systems for Enterprise Applications}, 
title={MobDSL: A Domain Specific Language for multiple mobile platform deployment}, 
year={2010},
volume={},
number={},
pages={1-7},
doi={10.1109/NESEA.2010.5678062}
}

@online{kotlin-homepage,
  title        = "{Kotlin Homepage}",
  url          = {https://kotlinlang.org/},
  urldate      = "02.12.2020",
  language     = "english"
}

@online{flutter-homepage,
  title        = "{Flutter Homepage}",
  url          = {https://flutter.dev/},
  urldate      = "02.12.2020",
  language     = "english"
}

@online{reactnative-homepage,
  title        = "{React Native Homepage}",
  url          = {https://reactnative.dev/},
  urldate      = "02.12.2020",
  language     = "english"
}

@online{vuenative-homepage,
  title        = "{Vue Native HomePage}",
  url          = {https://vue-native.io/},
  urldate      = "02.12.2020",
  language     = "english"
}

@online{swift-homepage,
  title        = "{Swift HomePage}",
  url          = {https://developer.apple.com/swift/},
  urldate      = "02.12.2020",
  language     = "english"
}

@article{when-and-how-develop-dsl,
author = {Mernik, Marjan and Heering, Jan and Sloane, Anthony},
year = {2005},
month = {12},
pages = {316-},
title = {When and How to Develop Domain-Specific Languages},
volume = {37},
journal = {ACM Comput. Surv.},
doi = {10.1145/1118890.1118892}
}

@article{study-on-preliminary-approaches-develop-dsl,
title = "A preliminary study on various implementation approaches of domain-specific language",
journal = "Information and Software Technology",
volume = "50",
number = "5",
pages = "390 - 405",
year = "2008",
issn = "0950-5849",
doi = "https://doi.org/10.1016/j.infsof.2007.04.002",
url = "http://www.sciencedirect.com/science/article/pii/S0950584907000419",
author = "Tomaž Kosar and Pablo E. {Martı´nez López} and Pablo A. Barrientos and Marjan Mernik",
keywords = "Domain-specific languages, Embedded approach, Preprocessing, Compiler/interpreter, Compiler/interpreter generator, Extensible compiler/interpreter, Commercial-Off-The-Shelf",
abstract = "Various implementation approaches for developing a domain-specific language are available in literature. There are certain common beliefs about the advantages/disadvantages of these approaches. However, it is hard to be objective and speak in favor of a particular one, since these implementation approaches are normally compared over diverse application domains. The purpose of this paper is to provide empirical results from ten diverse implementation approaches for domain-specific languages, but conducted using the same representative language. Comparison shows that these discussed approaches differ in terms of the effort need to implement them, however, the effort needed by a programmer to implement a domain-specific language should not be the only factor taken into consideration. Another important factor is the effort needed by an end-user to rapidly write correct programs using the produced domain-specific language. Therefore, this paper also provides empirical results on end-user productivity, which is measured as the lines of code needed to express a domain-specific program, similarity to the original notation, and how error-reporting and debugging are supported in a given implementation."
}

@article{spinellis-dsl-patterns,
title = "Notable design patterns for domain-specific languages",
journal = "Journal of Systems and Software",
volume = "56",
number = "1",
pages = "91 - 99",
year = "2001",
issn = "0164-1212",
doi = "https://doi.org/10.1016/S0164-1212(00)00089-3",
url = "http://www.sciencedirect.com/science/article/pii/S0164121200000893",
author = "Diomidis Spinellis",
keywords = "Design patterns, Domain-specific languages",
abstract = "The realisation of domain-specific languages (dsls) differs in fundamental ways from that of traditional programming languages. We describe eight recurring patterns that we have identified as being used for dsl design and implementation. Existing languages can be extended, restricted, partially used, or become hosts for dsls. Simple dsls can be implemented by lexical processing. In addition, dsls can be used to create front-ends to existing systems or to express complicated data structures. Finally, dsls can be combined using process pipelines. The patterns described form a pattern language that can be used as a building block for a systematic view of the software development process involving dsls."
}

@book{book-of-dsls,
author = {Kelly, Steven and Tolvanen, Juha-pekka},
year = {2008},
month = {04},
pages = {},
title = {Domain-Specific Modeling: Enabling Full Code Generation},
isbn = {978-0-470-03666-2},
journal = {Domain-Specific Modeling: Enabling Full Code Generation},
doi = {10.1002/9780470249260}
}

@inproceedings{dsl-traversal-transform,
author = {Gray, Jeff and Karsai, Gabor},
year = {2003},
month = {01},
pages = {325},
title = {An Examination of DSLs for Concisely Representing Model Traversals and Transformations.}
}